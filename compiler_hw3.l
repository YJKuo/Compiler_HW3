/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */

extern YYSTYPE yylval; //YYSTYPE
char buf[256];
extern int dump_symbol_flag;
extern void dump_symbol();

void print_code();
/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, 256 - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; return yytext[0]; }
"-" 	{ CONCAT; return yytext[0]; }
"*" 	{ CONCAT; return yytext[0]; }
"/" 	{ CONCAT; return yytext[0]; }
"%"     { CONCAT; return yytext[0]; }
"++"    { CONCAT; return INC; }
"--"    { CONCAT; return DEC; }

 /* Relational */
">"		{ CONCAT; return MT; }
"<"		{ CONCAT; return LT; }
">="	{ CONCAT; return MTE; }
"<="	{ CONCAT; return LTE; }
"=="	{ CONCAT; return EQ; }
"!="	{ CONCAT; return NE; }

 /* Assignment */
"="		{ CONCAT; return *yytext; }
"+="	{ CONCAT; return ADDASGN; }
"-="	{ CONCAT; return SUBASGN; }
"*="	{ CONCAT; return MULASGN; }
"/="	{ CONCAT; return DIVASGN; }
"%="	{ CONCAT; return MODASGN; }

 /* Logical */
"&&"	{ CONCAT; }
"||"	{ CONCAT; }
"!"		{ CONCAT; }

 /* Delimiters */
"("		{ CONCAT; return yytext[0];}
")"		{ CONCAT; return yytext[0]; }
"{"		{ CONCAT; return yytext[0]; }
"}"		{ CONCAT; return yytext[0]; }
"["		{ CONCAT; return yytext[0]; }
"]"		{ CONCAT; return yytext[0]; }
","		{ CONCAT; return yytext[0]; }

 /* Print Keywords */	
"print"		{ CONCAT; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; return IF;}
"else"		{ CONCAT; return ELSE;}
"for"		{ CONCAT; }
"while"		{ CONCAT; return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT; yylval.string = strdup(yytext); return VOID;}
"int"		{ CONCAT; yylval.string = strdup(yytext); return INT; }
"float"  	{ CONCAT; yylval.string = strdup(yytext); return FLOAT;}
"string"  	{ CONCAT; yylval.string = strdup(yytext); return STRING;}
"bool"  	{ CONCAT; yylval.string = strdup(yytext); return BOOL;}

 /* boolean Keywords */
"true"      { CONCAT; return TRUE; }
"false"     { CONCAT; return FALSE; }

"return"    { CONCAT; return RET;}

 /* String Constant */
\"				        { CONCAT; BEGIN STRING_STATE; }
<STRING_STATE>\"		{ CONCAT; BEGIN INITIAL; }
<STRING_STATE>[^"]*		{ CONCAT; yylval.string = strdup(yytext); return STR_CONST;}

 /* Number Constant */
{integer}	{ CONCAT; yylval.i_val = atoi(yytext); return I_CONST; }
{float}	    { CONCAT; yylval.f_val = atof(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ CONCAT; BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ CONCAT;  }
<COMMENT>\n			{ CONCAT; print_code();}
<COMMENT>"*"		{ CONCAT;  }
<COMMENT>"*/"		{ CONCAT;  BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ CONCAT;}

 /* Variable ID */
 {id}       { CONCAT;yylval.string = strdup(yytext); return ID; }

 /* others */

[;]         { CONCAT;return SEMICOLON;}
[\n]        { CONCAT; print_code();}
[ \t]		{ CONCAT;} /* Ignore */
[^ \t\n] 	{ CONCAT;} /* Ignore other charactor sets */
<<EOF>>     { yyterminate();return 0;}

%%

int yywrap()
{
    return 1;
}
void print_code(){
    printf("%d: %s",yylineno,buf);
    if(dump_symbol_flag == 1){
        dump_symbol();
        dump_symbol_flag = 0;
    }
    memset(buf, 0 ,sizeof(buf));
}
